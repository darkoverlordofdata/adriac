// Generated by CoffeeScript 2.0.0-alpha1
(function() {
  var StringTokenizer;

  module.exports = StringTokenizer = (function() {
    class StringTokenizer {
      constructor(str, delimiters = " \t\n\r\f", retDelims = false) {
        this.str = str;
        this.delimiters = delimiters;
        this.retDelims = retDelims;
        this.maxPosition = this.str.length;
      }

      skipDelimiters(startPos) {
        var c, position;
        position = startPos;
        while (!this.retDelims && position < this.maxPosition) {
          c = this.str[position];
          if (!this.isDelimiter(c)) {
            break;
          }
          position += 1;
        }
        return position;
      }

      scanToken(startPos) {
        var c, position;
        position = startPos;
        while (position < this.maxPosition) {
          c = this.str[position];
          if (this.isDelimiter(c)) {
            break;
          }
          position += 1;
        }
        if (this.retDelims && (startPos === position)) {
          c = this.str[position];
          if (this.isDelimiter(c)) {
            position += 1;
          }
        }
        return position;
      }

      isDelimiter(c) {
        return this.delimiters.indexOf(c) >= 0;
      }

      hasMoreTokens() {
        var newPosition;
        newPosition = this.skipDelimiters(this.currentPosition);
        return newPosition < this.maxPosition;
      }

      nextToken() {
        var start;
        this.currentPosition = this.newPosition >= 0 ? this.newPosition : this.skipDelimiters(this.currentPosition);
        this.newPosition = -1;
        if (this.currentPosition >= this.maxPosition) {
          throw "OutOfBounds";
        }
        start = this.currentPosition;
        this.currentPosition = this.scanToken(this.currentPosition);
        return this.str.substring(start, this.currentPosition);
      }

      countTokens() {
        var count, currpos;
        count = 0;
        currpos = this.currentPosition;
        while (currpos < this.maxPosition) {
          currpos = this.skipDelimiters(currpos);
          if (currpos >= this.maxPosition) {
            break;
          }
          currpos = this.scanToken(currpos);
          count++;
        }
        return count;
      }

      toArray(skip = "") {
        var tok, tokens;
        tokens = [];
        while (this.hasMoreTokens()) {
          tok = this.nextToken();
          if (skip.indexOf(tok) < 0) {
            tokens.push(tok);
          }
        }
        return tokens;
      }

    };

    StringTokenizer.prototype.currentPosition = 0;

    StringTokenizer.prototype.newPosition = -1;

    StringTokenizer.prototype.maxPosition = 0;

    StringTokenizer.prototype.retDelims = false;

    StringTokenizer.prototype.str = '';

    StringTokenizer.prototype.delimiters = '';

    return StringTokenizer;

  })();

}).call(this);
